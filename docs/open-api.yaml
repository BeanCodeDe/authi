openapi: "3.0.0"
info:
  title: authi Api 
  version: 1.0.0
servers:
  - url: http://localhost:1203

paths:
  /user:
    post:
      tags:
        - Create User
      summary: Get ID for new user
      responses:
        '200':
          description: |-
            Response with UUID for the user
          headers:
            Location:
              required: true
              schema:
                type: string
                format: UUID
                example: f455dea9-f8f2-42e6-bead-e97a3c329d8a
  /user/{userId}:
    put:
      tags:
        - Create User
      summary: Create user with ID from post request
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        description: Body with password for user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '201':
          description: |-
            User successfully created
        '409':
          description: |-
            User already exists. Maybe you did a retry? 
    patch:
      tags:
        - Update user password
      summary: Update password of user
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        description: Body with new password for user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '204':
          description: |-
            User password successfully updated
        '401':
          description: |-
            Not authorized to perform this action on user
      security:
        - bearerAuth: []
    delete:
      tags:
        - delete user
      summary: Delete user
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '204':
          description: |-
            User successfully deleted
        '401':
          description: |-
            Not authorized to perform this action on user
      security:
        - bearerAuth: []        
  /user/{userId}/login:
    post:
      tags:
        - Login User
      summary: Get Token for further communication
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: UUID      
      requestBody:
        description: Body with password and id for user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: |-
            Response with access_token and refresh_token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /user/{userId}/refresh:
    patch:
      tags:
        - Refresh Token
      summary: Get new token for further communication with refresh token
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: UUID      
        - in: header
          name: refresh_token
          schema:
            type: string
          required: true
      responses:
        '401':
          description: |-
            Unauthorized to get token
        '200':
          description: |-
            Response with access_token and refresh_token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
        - bearerAuth: []
components:
  schemas:
    Authentication:
      type: object
      properties:
        password:
          type: string
    Token:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        refresh_expires_in:
          type: integer
  securitySchemes:
    bearerAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
